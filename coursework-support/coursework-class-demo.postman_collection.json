{
	"info": {
		"_postman_id": "c8f88464-957d-416a-9136-49f37bf7ae5f",
		"name": "coursework-class-demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DELETE students 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:3000/students",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all students {empty} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"Empty response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.students.length).equal(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/students",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {Anna, 2001} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"id is strictly positive integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.gt(0);\r",
							"});\r",
							"pm.globals.set(\"anna_id\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anna\",\r\n    \"yob\": 2001\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {Bob, 2000} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"id is strictly positive integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.gt(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Bob\",\r\n    \"yob\": 2000\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {Christina, 1999} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"id is strictly positive integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.gt(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Christina\",\r\n    \"yob\": 1999\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {Danae, 2002} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"id is strictly positive integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.gt(0);\r",
							"    pm.globals.set(\"danae_id\", jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Danae\",\r\n    \"yob\": 2002\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {Elia, 2003} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"id is strictly positive integer\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.gt(0);\r",
							"    pm.globals.set(\"elia_id\", jsonData.id);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Elia\",\r\n    \"yob\": 2003\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {Elia, 1899} ERROR 422",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"pm.test(\"status is ERROR\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[`status`]).to.eql(`ERROR`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Elia\",\r\n    \"yob\": 1899\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {Elia, 2023} ERROR 422",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"pm.test(\"status is ERROR\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[`status`]).to.eql(`ERROR`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Elia\",\r\n    \"yob\": 2023\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST student {2000} ERROR 422",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"pm.test(\"status is ERROR\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[`status`]).to.eql(`ERROR`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"yob\": 2000\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET student id={{anna_id}} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"student is defined\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.student).to.not.equal(null);\r",
							"});\r",
							"pm.test(\"id is equal to requested id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.student.id).to.equal(pm.globals.get(\"anna_id\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/student/{{anna_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student",
						"{{anna_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET student name=an -> [Anna, Danae] OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"students is defined\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.students).to.not.equal(null);\r",
							"});\r",
							"pm.test(\"students identified: 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.students.length).to.equal(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/student?name=an",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					],
					"query": [
						{
							"key": "name",
							"value": "an"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT student {{danae_id}}->{Dinae} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[`status`]).to.eql(`OK`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Dina\",\r\n    \"yob\": 2004\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student/{{danae_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student",
						"{{danae_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET student name=an -> [Anna] OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"students is defined\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.students).to.not.equal(null);\r",
							"});\r",
							"pm.test(\"students identified: 1\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.students.length).to.equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/student?name=an",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					],
					"query": [
						{
							"key": "name",
							"value": "an"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET student name=abcd -> [] OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal(`OK`);\r",
							"});\r",
							"pm.test(\"students is defined\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.students).to.not.equal(null);\r",
							"});\r",
							"pm.test(\"students identified: 0\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.students.length).to.equal(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/student?name=abcd",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student"
					],
					"query": [
						{
							"key": "name",
							"value": "abcd"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT student {{elia_id}} -> {2004} OK 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"status is OK\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[`status`]).to.eql(`OK`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"yob\": 2004\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student/{{elia_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student",
						"{{elia_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT student {{elia_id}} -> {1899} ERROR 422",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"pm.test(\"status is ERROR\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[`status`]).to.eql(`ERROR`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"yob\": 1899\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student/{{elia_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student",
						"{{elia_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT student {{elia_id}} -> {2023} ERROR 422",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"pm.test(\"status is ERROR\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[`status`]).to.eql(`ERROR`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"yob\": 2023\r\n}"
				},
				"url": {
					"raw": "localhost:3000/student/{{elia_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"student",
						"{{elia_id}}"
					]
				}
			},
			"response": []
		}
	]
}